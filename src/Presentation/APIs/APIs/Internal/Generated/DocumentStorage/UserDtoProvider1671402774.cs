// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using SynergyISP.Application.Common.Dtos;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertUserDtoOperation1671402774
    public class UpsertUserDtoOperation1671402774 : Marten.Internal.Operations.StorageOperation<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly SynergyISP.Application.Common.Dtos.UserDto _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertUserDtoOperation1671402774(SynergyISP.Application.Common.Dtos.UserDto document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select synergy.mt_upsert_userdto(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Id != null)
            {
                parameters[2].Value = document.Id;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: UpsertUserDtoOperation1671402774
    
    
    // START: InsertUserDtoOperation1671402774
    public class InsertUserDtoOperation1671402774 : Marten.Internal.Operations.StorageOperation<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly SynergyISP.Application.Common.Dtos.UserDto _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertUserDtoOperation1671402774(SynergyISP.Application.Common.Dtos.UserDto document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select synergy.mt_insert_userdto(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Id != null)
            {
                parameters[2].Value = document.Id;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: InsertUserDtoOperation1671402774
    
    
    // START: UpdateUserDtoOperation1671402774
    public class UpdateUserDtoOperation1671402774 : Marten.Internal.Operations.StorageOperation<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly SynergyISP.Application.Common.Dtos.UserDto _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateUserDtoOperation1671402774(SynergyISP.Application.Common.Dtos.UserDto document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select synergy.mt_update_userdto(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Id != null)
            {
                parameters[2].Value = document.Id;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: UpdateUserDtoOperation1671402774
    
    
    // START: QueryOnlyUserDtoSelector1671402774
    public class QueryOnlyUserDtoSelector1671402774 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<SynergyISP.Application.Common.Dtos.UserDto>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyUserDtoSelector1671402774(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public SynergyISP.Application.Common.Dtos.UserDto Resolve(System.Data.Common.DbDataReader reader)
        {

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = _serializer.FromJson<SynergyISP.Application.Common.Dtos.UserDto>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<SynergyISP.Application.Common.Dtos.UserDto> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = await _serializer.FromJsonAsync<SynergyISP.Application.Common.Dtos.UserDto>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyUserDtoSelector1671402774
    
    
    // START: LightweightUserDtoSelector1671402774
    public class LightweightUserDtoSelector1671402774 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<SynergyISP.Application.Common.Dtos.UserDto, string>, Marten.Linq.Selectors.ISelector<SynergyISP.Application.Common.Dtos.UserDto>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightUserDtoSelector1671402774(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public SynergyISP.Application.Common.Dtos.UserDto Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = _serializer.FromJson<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<SynergyISP.Application.Common.Dtos.UserDto> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = await _serializer.FromJsonAsync<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightUserDtoSelector1671402774
    
    
    // START: IdentityMapUserDtoSelector1671402774
    public class IdentityMapUserDtoSelector1671402774 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<SynergyISP.Application.Common.Dtos.UserDto, string>, Marten.Linq.Selectors.ISelector<SynergyISP.Application.Common.Dtos.UserDto>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapUserDtoSelector1671402774(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public SynergyISP.Application.Common.Dtos.UserDto Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = _serializer.FromJson<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<SynergyISP.Application.Common.Dtos.UserDto> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = await _serializer.FromJsonAsync<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapUserDtoSelector1671402774
    
    
    // START: DirtyTrackingUserDtoSelector1671402774
    public class DirtyTrackingUserDtoSelector1671402774 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<SynergyISP.Application.Common.Dtos.UserDto, string>, Marten.Linq.Selectors.ISelector<SynergyISP.Application.Common.Dtos.UserDto>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingUserDtoSelector1671402774(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public SynergyISP.Application.Common.Dtos.UserDto Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = _serializer.FromJson<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<SynergyISP.Application.Common.Dtos.UserDto> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            SynergyISP.Application.Common.Dtos.UserDto document;
            document = await _serializer.FromJsonAsync<SynergyISP.Application.Common.Dtos.UserDto>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingUserDtoSelector1671402774
    
    
    // START: QueryOnlyUserDtoDocumentStorage1671402774
    public class QueryOnlyUserDtoDocumentStorage1671402774 : Marten.Internal.Storage.QueryOnlyDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyUserDtoDocumentStorage1671402774(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(SynergyISP.Application.Common.Dtos.UserDto document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(SynergyISP.Application.Common.Dtos.UserDto document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyUserDtoSelector1671402774(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyUserDtoDocumentStorage1671402774
    
    
    // START: LightweightUserDtoDocumentStorage1671402774
    public class LightweightUserDtoDocumentStorage1671402774 : Marten.Internal.Storage.LightweightDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightUserDtoDocumentStorage1671402774(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(SynergyISP.Application.Common.Dtos.UserDto document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(SynergyISP.Application.Common.Dtos.UserDto document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightUserDtoSelector1671402774(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightUserDtoDocumentStorage1671402774
    
    
    // START: IdentityMapUserDtoDocumentStorage1671402774
    public class IdentityMapUserDtoDocumentStorage1671402774 : Marten.Internal.Storage.IdentityMapDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapUserDtoDocumentStorage1671402774(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(SynergyISP.Application.Common.Dtos.UserDto document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(SynergyISP.Application.Common.Dtos.UserDto document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapUserDtoSelector1671402774(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapUserDtoDocumentStorage1671402774
    
    
    // START: DirtyTrackingUserDtoDocumentStorage1671402774
    public class DirtyTrackingUserDtoDocumentStorage1671402774 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingUserDtoDocumentStorage1671402774(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(SynergyISP.Application.Common.Dtos.UserDto document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertUserDtoOperation1671402774
            (
                document, Identity(document),
                session.Versions.ForType<SynergyISP.Application.Common.Dtos.UserDto, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(SynergyISP.Application.Common.Dtos.UserDto document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(SynergyISP.Application.Common.Dtos.UserDto document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingUserDtoSelector1671402774(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingUserDtoDocumentStorage1671402774
    
    
    // START: UserDtoBulkLoader1671402774
    public class UserDtoBulkLoader1671402774 : Marten.Internal.CodeGeneration.BulkLoader<SynergyISP.Application.Common.Dtos.UserDto, string>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string> _storage;

        public UserDtoBulkLoader1671402774(Marten.Internal.Storage.IDocumentStorage<SynergyISP.Application.Common.Dtos.UserDto, string> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY synergy.mt_doc_userdto(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_userdto_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into synergy.mt_doc_userdto (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_userdto_temp.\"id\", mt_doc_userdto_temp.\"data\", mt_doc_userdto_temp.\"mt_version\", mt_doc_userdto_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_userdto_temp left join synergy.mt_doc_userdto on mt_doc_userdto_temp.id = synergy.mt_doc_userdto.id where synergy.mt_doc_userdto.id is null)";

        public const string OVERWRITE_SQL = "update synergy.mt_doc_userdto target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_userdto_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_userdto_temp as select * from synergy.mt_doc_userdto limit 0";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, SynergyISP.Application.Common.Dtos.UserDto document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, SynergyISP.Application.Common.Dtos.UserDto document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: UserDtoBulkLoader1671402774
    
    
    // START: UserDtoProvider1671402774
    public class UserDtoProvider1671402774 : Marten.Internal.Storage.DocumentProvider<SynergyISP.Application.Common.Dtos.UserDto>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UserDtoProvider1671402774(Marten.Schema.DocumentMapping mapping) : base(new UserDtoBulkLoader1671402774(new QueryOnlyUserDtoDocumentStorage1671402774(mapping)), new QueryOnlyUserDtoDocumentStorage1671402774(mapping), new LightweightUserDtoDocumentStorage1671402774(mapping), new IdentityMapUserDtoDocumentStorage1671402774(mapping), new DirtyTrackingUserDtoDocumentStorage1671402774(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: UserDtoProvider1671402774
    
    
}

